package com.argcv.iphigenia.biendata.smp2016.model

import com.argcv.valhalla.string.StringHelper._

import scala.collection.parallel.immutable.ParSeq

/**
 *
 * @author Yu Jing <yu@argcv.com> on 12/24/16
 */
case class Loc(v: Int) {
  override def toString = v match {
    case 0 => ""
    case 1 => "东北"
    case 2 => "华北"
    case 3 => "华中"
    case 4 => "华东"
    case 5 => "西北"
    case 6 => "西南"
    case 7 => "华南"
    case _ => "境外"
  }
}

object Loc {
  val nw = Set[String]("辽宁", "吉林", "黑龙江省")
  //  东北地区：辽宁省、吉林省、黑龙江省
  val north = Set[String]("北京", "天津", "河北", "山西", "内蒙古")
  //  华北地区：北京市、天津市、河北省、山西省、内蒙古自治区
  val middle = Set[String]("河南", "湖北", "湖南")
  //  华中地区：河南省、湖北省、湖南省
  val east = Set[String]("上海", "江苏", "浙江", "安徽", "福建", "江西", "山东")
  //  华东地区：上海市、江苏省、浙江省、安徽省、福建省、江西省、山东省
  val ne = Set[String]("陕西", "甘肃", "青海", "宁夏", "新疆")
  //  西北地区：陕西省、甘肃省、青海省、宁夏回族自治区、新疆维吾尔族自治区
  val se = Set[String]("重庆", "四川", "贵州", "云南", "西藏")
  //  西南地区：重庆市、四川省、贵州省、云南省、西藏自治区
  val south = Set[String]("广东", "海南", "广西")
  //  华南地区:广东省、海南省、广西壮族自治区
  // 境外
  val locArrs: ParSeq[(Set[String], Int)] = List(nw, north, middle, east, ne, se, south).
    zipWithIndex.
    map(e => (e._1, e._2 + 1)).par

  def reco(s: String): Option[Loc] = {
    if (s == "None") {
      None
    } else {
      Some(locArrs.find(e => e._1.exists(s.contains)) match {
        case Some(v) => Loc(v._2)
        case None => Loc(8)
      })
    }
  }

  lazy val forgCounRegList = Set[String](
    //"中国",
    "蒙古", "朝鲜", "韩国", "日本",
    "菲律宾", "越南", "老挝", "柬埔寨", "缅甸", "泰国", "马来西亚", "文莱", "新加坡", "印度尼西亚",
    "东帝汶",
    "尼泊尔", "不丹", "孟加拉国", "印度", "巴基斯坦", "斯里兰卡", "马尔代夫",
    "哈萨克斯坦", "吉尔吉斯斯坦", "塔吉克斯坦", "乌兹别克斯坦", "土库曼斯坦",
    "阿富汗", "伊拉克", "伊朗", "叙利亚", "约旦", "黎巴嫩", "以色列", "巴勒斯坦", "沙特阿拉伯", "巴林", "卡塔尔", "科威特", "阿拉伯联合酋长国", "阿联酋",
    "阿曼", "也门", "格鲁吉亚", "亚美尼亚", "阿塞拜疆", "土耳其", "塞浦路斯", "锡金",
    "芬兰", "瑞典", "挪威", "冰岛", "丹麦", "法罗群岛",
    "爱沙尼亚", "拉脱维亚", "立陶宛", "白俄罗斯", "俄罗斯", "乌克兰", "摩尔多瓦",
    "波兰", "捷克", "斯洛伐克", "匈牙利", "德国", "奥地利", "瑞士", "列支敦士登",
    "英国", "爱尔兰", "荷兰", "比利时", "卢森堡", "法国", "摩纳哥",
    "罗马尼亚", "保加利亚", "塞尔维亚", "马其顿", "阿尔巴尼亚", "希腊", "斯洛文尼亚", "克罗地亚", "波斯尼亚", "墨塞哥维那",
    "意大利", "梵蒂冈", "圣马力诺", "马耳他", "西班牙", "葡萄牙", "安道尔",
    "埃及", "利比亚", "苏丹", "突尼斯", "阿尔及利亚", "摩洛哥", "亚速尔群岛", "马德拉群岛",
    "埃塞俄比亚", "厄立特里亚", "索马里", "吉布提", "肯尼亚", "坦桑尼亚", "乌干达", "卢旺达", "布隆迪", "塞舌尔",
    "乍得", "中非", "喀麦隆", "赤道几内亚", "加蓬", "刚果", "刚果民主共和国", "圣多美及普林西比",
    "毛里塔尼亚", "西撒哈拉", "塞内加尔", "冈比亚", "马里", "布基纳法索", "几内亚", "几内亚比绍", "佛得角", "塞拉利昂", "利比里亚", "科特迪瓦",
    "加纳", "多哥", "贝宁", "尼日尔", "加那利群岛",
    "赞比亚", "安哥拉", "津巴布韦", "马拉维", "莫桑比克", "博茨瓦纳", "纳米比亚", "南非",
    "斯威士兰", "莱索托", "马达加斯加", "科摩罗", "毛里求斯", "留尼旺", "圣赫勒拿",
    "澳大利亚", "新西兰", "巴布亚新几内亚", "所罗门群岛", "瓦努阿图", "密克罗尼西亚", "马绍尔群岛", "帕劳", "瑙鲁",
    "基里巴斯", "图瓦卢", "萨摩亚", "斐济群岛", "汤加", "库克群岛", "关岛", "新喀里多尼亚", "法属波利尼西亚",
    "皮特凯恩岛", "瓦利斯与富图纳", "纽埃", "托克劳", "美属萨摩亚", "北马里亚纳",
    "加拿大", "美国", "墨西哥", "格陵兰",
    "危地马拉", "伯利兹", "萨尔瓦多", "洪都拉斯", "尼加拉瓜", "哥斯达黎加", "巴拿马",
    "巴哈马", "古巴", "牙买加", "海地", "多米尼加共和国", "安提瓜和巴布达", "圣基茨和尼维斯",
    "多米尼克", "圣卢西亚", "圣文森特和格林纳丁斯", "格林纳达", "巴巴多斯", "特立尼达和多巴哥", "波多黎各",
    "英属维尔京群岛", "美属维尔京群岛", "安圭拉", "蒙特塞拉特", "瓜德罗普", "马提尼克", "荷属安的列斯", "阿鲁巴", "特克斯和凯科斯群岛", "开曼群岛", "百慕大",
    "哥伦比亚", "委内瑞拉", "圭亚那", "法属圭亚那", "苏里南",
    "厄瓜多尔", "秘鲁", "玻利维亚",
    "巴西",
    "智利", "阿根廷", "乌拉圭", "巴拉圭"
  )

  def recoNonDefault(s: String): Option[Loc] = {
    if (s == "None") {
      None
    } else {
      locArrs.find(e => e._1.exists(s.contains)) match {
        case Some(v) =>
          Some(Loc(v._2))
        case None =>
          if (forgCounRegList.contains(s)) {
            Some(Loc(8))
          } else {
            None
          }
      }
    }
  }

}